# backend/utils/forms_pdf.py
from io import BytesIO
from reportlab.lib.pagesizes import LETTER
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from reportlab.lib.colors import black, darkblue
from datetime import datetime
from backend.utils.forms import get_field_display_value

def render_submission_pdf(form: dict, submission: dict, clinic_info: dict = None) -> bytes:
    """
    Generate PDF for a form submission
    
    Args:
        form: Form document with schema
        submission: Submission document with data
        clinic_info: Optional clinic information override
        
    Returns:
        PDF bytes
    """
    # Default clinic info
    clinic = {
        "name": "Clínica Familia y Salud",
        "address": "13626 Veterans Memorial Dr Suite F, Houston, TX 77014",
        "phone": "(281) 580-8880",
        "email": "info@clinicafamiliaysalud.com",
        **(clinic_info or {})
    }
    
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=LETTER)
    width, height = LETTER
    
    c.setTitle(f"Form: {form.get('name')}")
    
    # Header section
    y_pos = height - 1*inch
    
    # Clinic header
    c.setFillColor(darkblue)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(1*inch, y_pos, clinic["name"])
    
    c.setFillColor(black)
    c.setFont("Helvetica", 10)
    y_pos -= 0.25*inch
    c.drawString(1*inch, y_pos, clinic["address"])
    
    y_pos -= 0.2*inch
    c.drawString(1*inch, y_pos, f"{clinic['phone']} • {clinic['email']}")
    
    # Form title section
    y_pos -= 0.5*inch
    c.setFont("Helvetica-Bold", 14)
    c.drawString(1*inch, y_pos, f"Form: {form.get('name')}")
    
    c.setFont("Helvetica", 9)
    y_pos -= 0.25*inch
    c.drawString(1*inch, y_pos, f"Version: {form.get('version', 1)} • Status: {form.get('status', 'draft').title()}")
    
    # Submission details
    y_pos -= 0.2*inch
    c.drawString(1*inch, y_pos, f"Submission ID: {str(submission.get('_id'))}")
    
    y_pos -= 0.2*inch
    created_at = submission.get("created_at", "")
    if created_at:
        try:
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            formatted_date = dt.strftime("%B %d, %Y at %I:%M %p")
        except:
            formatted_date = created_at
        c.drawString(1*inch, y_pos, f"Submitted: {formatted_date}")
    
    created_by = submission.get("created_by", {}).get("id", "Unknown")
    y_pos -= 0.2*inch
    c.drawString(1*inch, y_pos, f"Submitted by: {created_by}")
    
    # Form data section
    y_pos -= 0.4*inch
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*inch, y_pos, "Form Data")
    
    # Draw horizontal line
    y_pos -= 0.1*inch
    c.line(1*inch, y_pos, width - 1*inch, y_pos)
    
    y_pos -= 0.3*inch
    
    # Form fields and values
    fields = form.get("schema", {}).get("fields", [])
    submission_data = submission.get("data", {})
    
    c.setFont("Helvetica", 10)
    
    for field in fields:
        # Check if we need a new page
        if y_pos < 1.5*inch:
            c.showPage()
            y_pos = height - 1*inch
            c.setFont("Helvetica", 10)
        
        field_key = field["key"]
        field_label = field.get("label", field_key)
        field_value = submission_data.get(field_key)
        
        # Get display value
        display_value = get_field_display_value(field, field_value)
        if not display_value:
            display_value = "(not provided)"
        
        # Field label
        c.setFont("Helvetica-Bold", 10)
        c.drawString(1*inch, y_pos, f"{field_label}:")
        
        # Field value - handle multiline text
        c.setFont("Helvetica", 10)
        
        field_type = field.get("type")
        if field_type == "textarea" and display_value != "(not provided)":
            # Handle multiline textarea
            lines = str(display_value).split('\n')
            value_y = y_pos
            for line in lines[:10]:  # Limit to 10 lines
                c.drawString(1.2*inch, value_y, line[:80])  # Limit line length
                value_y -= 0.15*inch
            y_pos = value_y - 0.1*inch
        else:
            # Single line value
            # Truncate very long values
            if len(display_value) > 60:
                display_value = display_value[:57] + "..."
            c.drawString(1.2*inch, y_pos, display_value)
            y_pos -= 0.25*inch
        
        y_pos -= 0.05*inch  # Extra spacing between fields
    
    # Footer
    c.setFont("Helvetica-Oblique", 8)
    c.setFillColor(black)
    
    # Page numbers and footer
    page_num = c.getPageNumber()
    footer_text = f"Generated by ClinicHub • Page {page_num} • {datetime.now().strftime('%B %d, %Y')}"
    
    # Center the footer
    text_width = c.stringWidth(footer_text, "Helvetica-Oblique", 8)
    footer_x = (width - text_width) / 2
    c.drawString(footer_x, 0.5*inch, footer_text)
    
    # Finalize PDF
    c.showPage()
    c.save()
    
    return buf.getvalue()

def render_submissions_summary_pdf(form: dict, submissions: list, clinic_info: dict = None) -> bytes:
    """
    Generate PDF summary report for multiple form submissions
    
    Args:
        form: Form document with schema
        submissions: List of submission documents
        clinic_info: Optional clinic information override
        
    Returns:
        PDF bytes
    """
    # Default clinic info
    clinic = {
        "name": "Clínica Familia y Salud",
        "address": "13626 Veterans Memorial Dr Suite F, Houston, TX 77014",
        "phone": "(281) 580-8880",
        "email": "info@clinicafamiliaysalud.com",
        **(clinic_info or {})
    }
    
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=LETTER)
    width, height = LETTER
    
    c.setTitle(f"Form Summary: {form.get('name')}")
    
    # Header section
    y_pos = height - 1*inch
    
    # Clinic header
    c.setFillColor(darkblue)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(1*inch, y_pos, clinic["name"])
    
    c.setFillColor(black)
    c.setFont("Helvetica", 10)
    y_pos -= 0.25*inch
    c.drawString(1*inch, y_pos, clinic["address"])
    
    y_pos -= 0.2*inch
    c.drawString(1*inch, y_pos, f"{clinic['phone']} • {clinic['email']}")
    
    # Report title
    y_pos -= 0.5*inch
    c.setFont("Helvetica-Bold", 14)
    c.drawString(1*inch, y_pos, f"Submissions Report: {form.get('name')}")
    
    c.setFont("Helvetica", 10)
    y_pos -= 0.3*inch
    c.drawString(1*inch, y_pos, f"Total Submissions: {len(submissions)}")
    c.drawString(4*inch, y_pos, f"Report Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}")
    
    # Summary statistics (if applicable)
    y_pos -= 0.4*inch
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*inch, y_pos, "Summary")
    
    y_pos -= 0.1*inch
    c.line(1*inch, y_pos, width - 1*inch, y_pos)
    
    y_pos -= 0.3*inch
    c.setFont("Helvetica", 10)
    c.drawString(1*inch, y_pos, f"• Form Version: {form.get('version', 1)}")
    y_pos -= 0.2*inch
    c.drawString(1*inch, y_pos, f"• Form Status: {form.get('status', 'draft').title()}")
    
    if submissions:
        # Date range
        dates = [sub.get("created_at") for sub in submissions if sub.get("created_at")]
        if dates:
            dates.sort()
            try:
                first_date = datetime.fromisoformat(dates[0].replace('Z', '+00:00')).strftime('%B %d, %Y')
                last_date = datetime.fromisoformat(dates[-1].replace('Z', '+00:00')).strftime('%B %d, %Y')
                y_pos -= 0.2*inch
                c.drawString(1*inch, y_pos, f"• Submission Date Range: {first_date} to {last_date}")
            except:
                pass
    
    # Individual submissions list
    y_pos -= 0.4*inch
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*inch, y_pos, "Individual Submissions")
    
    y_pos -= 0.1*inch
    c.line(1*inch, y_pos, width - 1*inch, y_pos)
    
    y_pos -= 0.3*inch
    c.setFont("Helvetica", 9)
    
    for i, sub in enumerate(submissions[:50]):  # Limit to first 50 submissions
        if y_pos < 1.5*inch:
            c.showPage()
            y_pos = height - 1*inch
            c.setFont("Helvetica", 9)
        
        sub_id = str(sub.get("_id"))[:8] + "..."
        created_at = sub.get("created_at", "")
        created_by = sub.get("created_by", {}).get("id", "Unknown")
        
        try:
            if created_at:
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime("%m/%d/%Y %H:%M")
            else:
                formatted_date = "Unknown"
        except:
            formatted_date = "Unknown"
        
        c.drawString(1*inch, y_pos, f"{i+1:3d}. {sub_id}")
        c.drawString(2.5*inch, y_pos, formatted_date)
        c.drawString(4.5*inch, y_pos, created_by)
        
        y_pos -= 0.15*inch
    
    if len(submissions) > 50:
        y_pos -= 0.2*inch
        c.drawString(1*inch, y_pos, f"... and {len(submissions) - 50} more submissions")
    
    # Footer
    c.setFont("Helvetica-Oblique", 8)
    page_num = c.getPageNumber()
    footer_text = f"Generated by ClinicHub • Page {page_num} • {datetime.now().strftime('%B %d, %Y')}"
    
    text_width = c.stringWidth(footer_text, "Helvetica-Oblique", 8)
    footer_x = (width - text_width) / 2
    c.drawString(footer_x, 0.5*inch, footer_text)
    
    c.showPage()
    c.save()
    
    return buf.getvalue()